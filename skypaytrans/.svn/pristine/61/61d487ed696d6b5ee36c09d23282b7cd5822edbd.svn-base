package com.saifintex.services.impl;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.Date;

import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.stereotype.Service;

import com.google.gson.Gson;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.saifintex.dao.QRGeneratedFilesDetailDAO;
import com.saifintex.dao.QRUniqueSeriesDAO;
import com.saifintex.services.QRGenerateService;
import com.saifintex.utils.DateUtils;
import com.saifintex.utils.EncryptionDecryptionUtils;
import com.saifintex.web.dto.QRBulkZipDownloadResponseParams;
import com.saifintex.web.dto.QRDetailsDTO;

import com.saifintex.web.entity.QRGeneratedFilesDetailEntity;
import com.saifintex.web.entity.QRUniqueSeriesEntity;

@Service
@Transactional
public class QRGenerateServiceImpl implements QRGenerateService {
	@Autowired
	private QRUniqueSeriesDAO qrUniqueSeriesDAO;
 @Autowired
 private QRGeneratedFilesDetailDAO qrGeneratedFilesDetailDAO;
	@Value("${app.qr.series.prefix}")
	private String seriesPrefix;

	@Value("${app.qr.standee.key}")
	private String standeeKeyword;
	@Value("${app.qr.storage.path}")
	private String path;
	
	@Value("${app.deployment.envt}")
	private String deploymentEnvrt;

	@Value("${app.qr.domain}")
	private String qrDomain;
	@Override
	public Object generateQRCodes(int number) {
		String folderName=null;
		
		synchronized (this) {
			
			folderName=path+String.valueOf(DateUtils.getCurrentDate()+"_"+System.currentTimeMillis());
			File file=new File(folderName);
			if(!file.exists()) {
				
				if(deploymentEnvrt.equalsIgnoreCase("linux")) {
					file.setExecutable(true,false);
					file.setReadable(true,false);
					file.setWritable(true,false);
				}
				if(!file.mkdir()) {
					System.out.println("not creating");
				}
				
			}else {
				return null;
			}
			for (int i = 0; i < number; i++) {
				QRUniqueSeriesEntity entity = createQREntity();
				QRUniqueSeriesEntity generatedQrSeriesEntity = qrUniqueSeriesDAO.saveAndGet(entity);
				String text = getTextToBeFiedToQRCode(generatedQrSeriesEntity);
				String imageName=seriesPrefix+generatedQrSeriesEntity.getId()+".png";
				String filePath=null;
				if(deploymentEnvrt.equalsIgnoreCase("linux")) {
					filePath = folderName+"/"+imageName;
				}else {
					filePath = folderName+"\\"+imageName;
				}
				 
				if (generateQRCodeImage(text, 350, 350, filePath)) {
					generatedQrSeriesEntity.setQrGenerated(true);
					generatedQrSeriesEntity.setFolderName(folderName);
					generatedQrSeriesEntity.setQrImageName(imageName);
				}
			}
		
		
		try {
		zipFolder(Paths.get(folderName), folderName+".zip");
		} catch (Exception e) {
			
			e.printStackTrace();
			return null;
		}
	}
		return true ;
	}

	private static boolean generateQRCodeImage(String text, int width, int height, String filePath) {
		QRCodeWriter qrCodeWriter = new QRCodeWriter();
		try {
			BitMatrix bitMatrix = qrCodeWriter.encode(text, BarcodeFormat.QR_CODE, width, height);

			Path path = FileSystems.getDefault().getPath(filePath);
		
			MatrixToImageWriter.writeToPath(bitMatrix, "PNG", path);
		} catch (WriterException e) {
			return false;
		} catch (IOException e) {
			return false;
		}
		return true;
	}

	private QRUniqueSeriesEntity createQREntity() {
		Date date = DateUtils.getCurrentDateTime();
		QRUniqueSeriesEntity entity = new QRUniqueSeriesEntity();
		entity.setCreatedOn(date);
		entity.setCreatedBy(1);
		entity.setModifiedBy(1);
		entity.setModifiedOn(date);
		return entity;

	}

	private String getTextToBeFiedToQRCode(QRUniqueSeriesEntity entity) {
		QRDetailsDTO dto = new QRDetailsDTO();
		dto.setQrType(standeeKeyword);
		dto.setUniqueSeries(seriesPrefix + entity.getId());
		dto.setCreatedDate(entity.getCreatedOn().toString());
		dto.setQrDomain(qrDomain);
		Gson gson = new Gson();
		return EncryptionDecryptionUtils.encryptQRData(gson.toJson(dto));
	}
	
	private void zipFolder(Path sourceFolderPath, String zipPath) throws Exception {
		 Path zipPath1=Paths.get(zipPath);
		 
		        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipPath1.toFile()));
		        
		        Files.walkFileTree(sourceFolderPath, new SimpleFileVisitor<Path>() {
		       
		            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
		
		              zos.putNextEntry(new ZipEntry(sourceFolderPath.relativize(file).toString()));
		
		                Files.copy(file, zos);
		
		                zos.closeEntry();
		
		                return FileVisitResult.CONTINUE;
		
		            }
		
		        });
		
		        zos.close();
		        
		        if(deploymentEnvrt.equalsIgnoreCase("linux")) {
		        	zipPath1.toFile().setExecutable(true,false);
		        	zipPath1.toFile().setReadable(true,false);
		        	zipPath1.toFile().setWritable(true,false);
				}
		        saveQrGeneratedDetails(zipPath1);
		       
		
		    }
	
	private ByteArrayResource getResourceToDownloadFile(String path) {
		
		Path file = Paths.get(path);
		ByteArrayResource resource=null;
		
		try {
			resource = new ByteArrayResource(Files.readAllBytes(file));
		} catch (IOException e) {
			// TODO Auto-generated catch block
	
			e.printStackTrace();
		}finally {
	
		}
		return resource;
	}
	private void saveQrGeneratedDetails(Path path) {
		QRGeneratedFilesDetailEntity entity=new QRGeneratedFilesDetailEntity();
		entity.setFileName(path.toFile().getName());
		entity.setCreatedBy(1);
		entity.setCreatedOn(DateUtils.getCurrentDateTime());
		entity.setModifiedBy(1);
		entity.setModifiedOn(DateUtils.getCurrentDateTime());
		entity.setFolderName(path.toFile().getAbsolutePath());
		qrGeneratedFilesDetailDAO.save(entity);
	}

	@Override
	public QRBulkZipDownloadResponseParams getFileDetailTODownload(String fileName) {
		String folderName=null;
		if(!fileName.contains(".zip")) {
		folderName=path+fileName+".zip";
		}else {
			folderName=path+fileName+".zip";
		}
		QRBulkZipDownloadResponseParams params=createQRBulkZipDownloadResponseParams(folderName);
		return params;
	}
	private QRBulkZipDownloadResponseParams createQRBulkZipDownloadResponseParams(String fileName) {
		QRBulkZipDownloadResponseParams params=new QRBulkZipDownloadResponseParams();
		params.setByteArrayResource(getResourceToDownloadFile(fileName));
		Path file = Paths.get(fileName);
		params.setFile(file.toFile());
		return params;
	}
	
}
