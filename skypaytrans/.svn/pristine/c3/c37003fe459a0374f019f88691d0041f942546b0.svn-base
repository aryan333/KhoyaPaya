package com.saifintex.services.impl;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.saifintex.dao.UsersInvitationsDetailDAO;
import com.saifintex.domain.ReminderNotificationParams;
import com.saifintex.entity.UsersInvitationsDetailEntity;
import com.saifintex.services.UsersInvitationsDetailService;
import com.saifintex.utils.DateUtils;
import com.saifintex.utils.SmsThread;
import com.saifintex.utils.ThreadUtils;

@Service
@Transactional
public class UsersInvitationsDetailServiceImpl implements UsersInvitationsDetailService {

	
	@Autowired
	private UsersInvitationsDetailDAO usersInvitationsDetailDAO;
	
	@Value("${app.invitation.timelimit}")
	private int invitationTimeLimit;
	
	@Value("${app.invitation.sms.limit}")
	private int invitationSMSLimit;
	
	@Value("${app.invite.url1}")
	private String appInviteUrl;
	
	@Value("${app.invite.sms.template}")
	private String smsTemplate;
	
	
@Override
public boolean sendInvitation(ReminderNotificationParams reminderNotificationParams) {
	UsersInvitationsDetailEntity entity=usersInvitationsDetailDAO.getByBothId(reminderNotificationParams.getPayerId(), reminderNotificationParams.getPayeeId());
	
	if(validateInvitation(entity)) {
	StringBuilder builder= new StringBuilder(reminderNotificationParams.getLoggedInUserName());
	builder.append(" "+smsTemplate+" "+reminderNotificationParams.getTotalBalance());
	builder.append(" "+appInviteUrl);
	builder.append(reminderNotificationParams.getSenderReferralCode());
	SmsThread thread=new SmsThread(reminderNotificationParams.getRecipientMobileNumber(), builder.toString());
	ThreadUtils.start(thread);
	entity.setSmsInviteCount(entity.getSmsInviteCount()+1);
	entity.setInvitationSentDate(DateUtils.getCurrentDateTime());
	return true;
	
	}else {
		return false;
	}
}

private boolean validateInvitation(UsersInvitationsDetailEntity usersInvitationsDetailEntity) {
	
	if(usersInvitationsDetailEntity.getInvitationSentDate()!=null && getTransactionDuration(usersInvitationsDetailEntity.getInvitationSentDate())<=invitationTimeLimit) {
		return false;
	}else if(usersInvitationsDetailEntity.getSmsInviteCount()>=invitationSMSLimit) {
		return false;
	}else {
		return true;
	}
}
private long getTransactionDuration(Date paymentDate) {
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	Date now = new Date();
	String modifiedDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(now);
	sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

	Date endDate = null;
	try {
		endDate = sdf.parse(modifiedDate);
	} catch (ParseException e) {
		e.printStackTrace();
	}
	long timeDiff = Math.abs(endDate.getTime() - paymentDate.getTime());
	long duration = TimeUnit.MILLISECONDS.toHours(timeDiff);
	return duration;
}
}
